
Meteostation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001270  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800137c  0800137c  0001137c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013a0  080013a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a8  20000000  080013a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  200001a8  0800154c  000201a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000214  0800154c  00020214  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e05f  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c72  00000000  00000000  0002e230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ba2  00000000  00000000  0002fea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000700  00000000  00000000  00034a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000888  00000000  00000000  00035148  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003726  00000000  00000000  000359d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ba7  00000000  00000000  000390f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003bc9d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000143c  00000000  00000000  0003bd1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08001364 	.word	0x08001364

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08001364 	.word	0x08001364

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f880 	bl	8000260 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f846 	bl	80001f8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	200001a4 	.word	0x200001a4

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f827 	bl	80001d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f001 f810 	bl	80011b0 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	200001c4 	.word	0x200001c4

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	200001c4 	.word	0x200001c4

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001b6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff6 	bl	80001a8 <HAL_GetTick>
 80001bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001be:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80001c2:	bf18      	it	ne
 80001c4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001c6:	f7ff ffef 	bl	80001a8 <HAL_GetTick>
 80001ca:	1b40      	subs	r0, r0, r5
 80001cc:	42a0      	cmp	r0, r4
 80001ce:	d3fa      	bcc.n	80001c6 <HAL_Delay+0x12>
  {
  }
}
 80001d0:	b003      	add	sp, #12
 80001d2:	bd30      	pop	{r4, r5, pc}

080001d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d4:	4a07      	ldr	r2, [pc, #28]	; (80001f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e2:	041b      	lsls	r3, r3, #16
 80001e4:	0c1b      	lsrs	r3, r3, #16
 80001e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f0:	60d3      	str	r3, [r2, #12]
 80001f2:	4770      	bx	lr
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001fa:	b530      	push	{r4, r5, lr}
 80001fc:	68dc      	ldr	r4, [r3, #12]
 80001fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000202:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000206:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	2b04      	cmp	r3, #4
 800020a:	bf28      	it	cs
 800020c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000210:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000214:	bf98      	it	ls
 8000216:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	fa05 f303 	lsl.w	r3, r5, r3
 800021c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000220:	bf88      	it	hi
 8000222:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000224:	4019      	ands	r1, r3
 8000226:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000228:	fa05 f404 	lsl.w	r4, r5, r4
 800022c:	3c01      	subs	r4, #1
 800022e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000230:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000232:	ea42 0201 	orr.w	r2, r2, r1
 8000236:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	bfaf      	iteee	ge
 800023c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	4b06      	ldrlt	r3, [pc, #24]	; (800025c <HAL_NVIC_SetPriority+0x64>)
 8000242:	f000 000f 	andlt.w	r0, r0, #15
 8000246:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	bfa5      	ittet	ge
 800024a:	b2d2      	uxtbge	r2, r2
 800024c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000ed14 	.word	0xe000ed14

08000260 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000260:	3801      	subs	r0, #1
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d20a      	bcs.n	800027e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000274:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000276:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000278:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800027e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000e010 	.word	0xe000e010
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800028e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	bf0c      	ite	eq
 8000294:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000298:	f022 0204 	bicne.w	r2, r2, #4
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	4770      	bx	lr
 80002a0:	e000e010 	.word	0xe000e010

080002a4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002a4:	4770      	bx	lr

080002a6 <HAL_SYSTICK_IRQHandler>:
{
 80002a6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002a8:	f7ff fffc 	bl	80002a4 <HAL_SYSTICK_Callback>
 80002ac:	bd08      	pop	{r3, pc}
	...

080002b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002b4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002b6:	4616      	mov	r6, r2
 80002b8:	4b65      	ldr	r3, [pc, #404]	; (8000450 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ba:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000460 <HAL_GPIO_Init+0x1b0>
 80002be:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000464 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002c2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002c8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002cc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d0:	45a0      	cmp	r8, r4
 80002d2:	d17f      	bne.n	80003d4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002d4:	684d      	ldr	r5, [r1, #4]
 80002d6:	2d12      	cmp	r5, #18
 80002d8:	f000 80af 	beq.w	800043a <HAL_GPIO_Init+0x18a>
 80002dc:	f200 8088 	bhi.w	80003f0 <HAL_GPIO_Init+0x140>
 80002e0:	2d02      	cmp	r5, #2
 80002e2:	f000 80a7 	beq.w	8000434 <HAL_GPIO_Init+0x184>
 80002e6:	d87c      	bhi.n	80003e2 <HAL_GPIO_Init+0x132>
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	f000 808e 	beq.w	800040a <HAL_GPIO_Init+0x15a>
 80002ee:	2d01      	cmp	r5, #1
 80002f0:	f000 809e 	beq.w	8000430 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002f4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002f8:	2cff      	cmp	r4, #255	; 0xff
 80002fa:	bf93      	iteet	ls
 80002fc:	4682      	movls	sl, r0
 80002fe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000302:	3d08      	subhi	r5, #8
 8000304:	f8d0 b000 	ldrls.w	fp, [r0]
 8000308:	bf92      	itee	ls
 800030a:	00b5      	lslls	r5, r6, #2
 800030c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000310:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000312:	fa09 f805 	lsl.w	r8, r9, r5
 8000316:	ea2b 0808 	bic.w	r8, fp, r8
 800031a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800031e:	bf88      	it	hi
 8000320:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000324:	ea48 0505 	orr.w	r5, r8, r5
 8000328:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800032c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000330:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000334:	d04e      	beq.n	80003d4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4d47      	ldr	r5, [pc, #284]	; (8000454 <HAL_GPIO_Init+0x1a4>)
 8000338:	4f46      	ldr	r7, [pc, #280]	; (8000454 <HAL_GPIO_Init+0x1a4>)
 800033a:	69ad      	ldr	r5, [r5, #24]
 800033c:	f026 0803 	bic.w	r8, r6, #3
 8000340:	f045 0501 	orr.w	r5, r5, #1
 8000344:	61bd      	str	r5, [r7, #24]
 8000346:	69bd      	ldr	r5, [r7, #24]
 8000348:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800034c:	f005 0501 	and.w	r5, r5, #1
 8000350:	9501      	str	r5, [sp, #4]
 8000352:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000356:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800035a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000360:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000364:	fa09 f90b 	lsl.w	r9, r9, fp
 8000368:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800036c:	4d3a      	ldr	r5, [pc, #232]	; (8000458 <HAL_GPIO_Init+0x1a8>)
 800036e:	42a8      	cmp	r0, r5
 8000370:	d068      	beq.n	8000444 <HAL_GPIO_Init+0x194>
 8000372:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000376:	42a8      	cmp	r0, r5
 8000378:	d066      	beq.n	8000448 <HAL_GPIO_Init+0x198>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d064      	beq.n	800044c <HAL_GPIO_Init+0x19c>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	bf0c      	ite	eq
 800038a:	2503      	moveq	r5, #3
 800038c:	2504      	movne	r5, #4
 800038e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000392:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000396:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800039a:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800039c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80003a0:	bf14      	ite	ne
 80003a2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80003a4:	43a5      	biceq	r5, r4
 80003a6:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003a8:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003aa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80003ae:	bf14      	ite	ne
 80003b0:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80003b2:	43a5      	biceq	r5, r4
 80003b4:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003b6:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003b8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003bc:	bf14      	ite	ne
 80003be:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80003c0:	43a5      	biceq	r5, r4
 80003c2:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003c4:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003c6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003ca:	bf14      	ite	ne
 80003cc:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80003ce:	ea25 0404 	biceq.w	r4, r5, r4
 80003d2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003d4:	3601      	adds	r6, #1
 80003d6:	2e10      	cmp	r6, #16
 80003d8:	f47f af73 	bne.w	80002c2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003dc:	b003      	add	sp, #12
 80003de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003e2:	2d03      	cmp	r5, #3
 80003e4:	d022      	beq.n	800042c <HAL_GPIO_Init+0x17c>
 80003e6:	2d11      	cmp	r5, #17
 80003e8:	d184      	bne.n	80002f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003ea:	68ca      	ldr	r2, [r1, #12]
 80003ec:	3204      	adds	r2, #4
          break;
 80003ee:	e781      	b.n	80002f4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f0:	4f1a      	ldr	r7, [pc, #104]	; (800045c <HAL_GPIO_Init+0x1ac>)
 80003f2:	42bd      	cmp	r5, r7
 80003f4:	d009      	beq.n	800040a <HAL_GPIO_Init+0x15a>
 80003f6:	d812      	bhi.n	800041e <HAL_GPIO_Init+0x16e>
 80003f8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000468 <HAL_GPIO_Init+0x1b8>
 80003fc:	454d      	cmp	r5, r9
 80003fe:	d004      	beq.n	800040a <HAL_GPIO_Init+0x15a>
 8000400:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000404:	454d      	cmp	r5, r9
 8000406:	f47f af75 	bne.w	80002f4 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800040a:	688a      	ldr	r2, [r1, #8]
 800040c:	b1c2      	cbz	r2, 8000440 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800040e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000410:	bf0c      	ite	eq
 8000412:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000416:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800041a:	2208      	movs	r2, #8
 800041c:	e76a      	b.n	80002f4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800041e:	4575      	cmp	r5, lr
 8000420:	d0f3      	beq.n	800040a <HAL_GPIO_Init+0x15a>
 8000422:	4565      	cmp	r5, ip
 8000424:	d0f1      	beq.n	800040a <HAL_GPIO_Init+0x15a>
 8000426:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800046c <HAL_GPIO_Init+0x1bc>
 800042a:	e7eb      	b.n	8000404 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800042c:	2200      	movs	r2, #0
 800042e:	e761      	b.n	80002f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000430:	68ca      	ldr	r2, [r1, #12]
          break;
 8000432:	e75f      	b.n	80002f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000434:	68ca      	ldr	r2, [r1, #12]
 8000436:	3208      	adds	r2, #8
          break;
 8000438:	e75c      	b.n	80002f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800043a:	68ca      	ldr	r2, [r1, #12]
 800043c:	320c      	adds	r2, #12
          break;
 800043e:	e759      	b.n	80002f4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000440:	2204      	movs	r2, #4
 8000442:	e757      	b.n	80002f4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000444:	2500      	movs	r5, #0
 8000446:	e7a2      	b.n	800038e <HAL_GPIO_Init+0xde>
 8000448:	2501      	movs	r5, #1
 800044a:	e7a0      	b.n	800038e <HAL_GPIO_Init+0xde>
 800044c:	2502      	movs	r5, #2
 800044e:	e79e      	b.n	800038e <HAL_GPIO_Init+0xde>
 8000450:	40010400 	.word	0x40010400
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800
 800045c:	10210000 	.word	0x10210000
 8000460:	10310000 	.word	0x10310000
 8000464:	10320000 	.word	0x10320000
 8000468:	10110000 	.word	0x10110000
 800046c:	10220000 	.word	0x10220000

08000470 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000470:	6883      	ldr	r3, [r0, #8]
 8000472:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000474:	bf14      	ite	ne
 8000476:	2001      	movne	r0, #1
 8000478:	2000      	moveq	r0, #0
 800047a:	4770      	bx	lr

0800047c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800047c:	b10a      	cbz	r2, 8000482 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800047e:	6101      	str	r1, [r0, #16]
 8000480:	4770      	bx	lr
 8000482:	0409      	lsls	r1, r1, #16
 8000484:	e7fb      	b.n	800047e <HAL_GPIO_WritePin+0x2>
	...

08000488 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000488:	6803      	ldr	r3, [r0, #0]
{
 800048a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048e:	07db      	lsls	r3, r3, #31
{
 8000490:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000492:	d410      	bmi.n	80004b6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000494:	682b      	ldr	r3, [r5, #0]
 8000496:	079f      	lsls	r7, r3, #30
 8000498:	d45e      	bmi.n	8000558 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800049a:	682b      	ldr	r3, [r5, #0]
 800049c:	0719      	lsls	r1, r3, #28
 800049e:	f100 8095 	bmi.w	80005cc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004a2:	682b      	ldr	r3, [r5, #0]
 80004a4:	075a      	lsls	r2, r3, #29
 80004a6:	f100 80bf 	bmi.w	8000628 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004aa:	69ea      	ldr	r2, [r5, #28]
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 812d 	bne.w	800070c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004b2:	2000      	movs	r0, #0
 80004b4:	e014      	b.n	80004e0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004b6:	4c90      	ldr	r4, [pc, #576]	; (80006f8 <HAL_RCC_OscConfig+0x270>)
 80004b8:	6863      	ldr	r3, [r4, #4]
 80004ba:	f003 030c 	and.w	r3, r3, #12
 80004be:	2b04      	cmp	r3, #4
 80004c0:	d007      	beq.n	80004d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004c2:	6863      	ldr	r3, [r4, #4]
 80004c4:	f003 030c 	and.w	r3, r3, #12
 80004c8:	2b08      	cmp	r3, #8
 80004ca:	d10c      	bne.n	80004e6 <HAL_RCC_OscConfig+0x5e>
 80004cc:	6863      	ldr	r3, [r4, #4]
 80004ce:	03de      	lsls	r6, r3, #15
 80004d0:	d509      	bpl.n	80004e6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004d2:	6823      	ldr	r3, [r4, #0]
 80004d4:	039c      	lsls	r4, r3, #14
 80004d6:	d5dd      	bpl.n	8000494 <HAL_RCC_OscConfig+0xc>
 80004d8:	686b      	ldr	r3, [r5, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d1da      	bne.n	8000494 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004de:	2001      	movs	r0, #1
}
 80004e0:	b002      	add	sp, #8
 80004e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e6:	686b      	ldr	r3, [r5, #4]
 80004e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004ec:	d110      	bne.n	8000510 <HAL_RCC_OscConfig+0x88>
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004f6:	f7ff fe57 	bl	80001a8 <HAL_GetTick>
 80004fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	0398      	lsls	r0, r3, #14
 8000500:	d4c8      	bmi.n	8000494 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000502:	f7ff fe51 	bl	80001a8 <HAL_GetTick>
 8000506:	1b80      	subs	r0, r0, r6
 8000508:	2864      	cmp	r0, #100	; 0x64
 800050a:	d9f7      	bls.n	80004fc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800050c:	2003      	movs	r0, #3
 800050e:	e7e7      	b.n	80004e0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000510:	b99b      	cbnz	r3, 800053a <HAL_RCC_OscConfig+0xb2>
 8000512:	6823      	ldr	r3, [r4, #0]
 8000514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000518:	6023      	str	r3, [r4, #0]
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000520:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000522:	f7ff fe41 	bl	80001a8 <HAL_GetTick>
 8000526:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	0399      	lsls	r1, r3, #14
 800052c:	d5b2      	bpl.n	8000494 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052e:	f7ff fe3b 	bl	80001a8 <HAL_GetTick>
 8000532:	1b80      	subs	r0, r0, r6
 8000534:	2864      	cmp	r0, #100	; 0x64
 8000536:	d9f7      	bls.n	8000528 <HAL_RCC_OscConfig+0xa0>
 8000538:	e7e8      	b.n	800050c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	d103      	bne.n	800054a <HAL_RCC_OscConfig+0xc2>
 8000542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000546:	6023      	str	r3, [r4, #0]
 8000548:	e7d1      	b.n	80004ee <HAL_RCC_OscConfig+0x66>
 800054a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800054e:	6023      	str	r3, [r4, #0]
 8000550:	6823      	ldr	r3, [r4, #0]
 8000552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000556:	e7cd      	b.n	80004f4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000558:	4c67      	ldr	r4, [pc, #412]	; (80006f8 <HAL_RCC_OscConfig+0x270>)
 800055a:	6863      	ldr	r3, [r4, #4]
 800055c:	f013 0f0c 	tst.w	r3, #12
 8000560:	d007      	beq.n	8000572 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000562:	6863      	ldr	r3, [r4, #4]
 8000564:	f003 030c 	and.w	r3, r3, #12
 8000568:	2b08      	cmp	r3, #8
 800056a:	d110      	bne.n	800058e <HAL_RCC_OscConfig+0x106>
 800056c:	6863      	ldr	r3, [r4, #4]
 800056e:	03da      	lsls	r2, r3, #15
 8000570:	d40d      	bmi.n	800058e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	079b      	lsls	r3, r3, #30
 8000576:	d502      	bpl.n	800057e <HAL_RCC_OscConfig+0xf6>
 8000578:	692b      	ldr	r3, [r5, #16]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d1af      	bne.n	80004de <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800057e:	6823      	ldr	r3, [r4, #0]
 8000580:	696a      	ldr	r2, [r5, #20]
 8000582:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000586:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	e785      	b.n	800049a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800058e:	692a      	ldr	r2, [r5, #16]
 8000590:	4b5a      	ldr	r3, [pc, #360]	; (80006fc <HAL_RCC_OscConfig+0x274>)
 8000592:	b16a      	cbz	r2, 80005b0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000598:	f7ff fe06 	bl	80001a8 <HAL_GetTick>
 800059c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	079f      	lsls	r7, r3, #30
 80005a2:	d4ec      	bmi.n	800057e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005a4:	f7ff fe00 	bl	80001a8 <HAL_GetTick>
 80005a8:	1b80      	subs	r0, r0, r6
 80005aa:	2802      	cmp	r0, #2
 80005ac:	d9f7      	bls.n	800059e <HAL_RCC_OscConfig+0x116>
 80005ae:	e7ad      	b.n	800050c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b2:	f7ff fdf9 	bl	80001a8 <HAL_GetTick>
 80005b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005b8:	6823      	ldr	r3, [r4, #0]
 80005ba:	0798      	lsls	r0, r3, #30
 80005bc:	f57f af6d 	bpl.w	800049a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005c0:	f7ff fdf2 	bl	80001a8 <HAL_GetTick>
 80005c4:	1b80      	subs	r0, r0, r6
 80005c6:	2802      	cmp	r0, #2
 80005c8:	d9f6      	bls.n	80005b8 <HAL_RCC_OscConfig+0x130>
 80005ca:	e79f      	b.n	800050c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005cc:	69aa      	ldr	r2, [r5, #24]
 80005ce:	4c4a      	ldr	r4, [pc, #296]	; (80006f8 <HAL_RCC_OscConfig+0x270>)
 80005d0:	4b4b      	ldr	r3, [pc, #300]	; (8000700 <HAL_RCC_OscConfig+0x278>)
 80005d2:	b1da      	cbz	r2, 800060c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005d8:	f7ff fde6 	bl	80001a8 <HAL_GetTick>
 80005dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005e0:	079b      	lsls	r3, r3, #30
 80005e2:	d50d      	bpl.n	8000600 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005e8:	4b46      	ldr	r3, [pc, #280]	; (8000704 <HAL_RCC_OscConfig+0x27c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80005f0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005f2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005f4:	9b01      	ldr	r3, [sp, #4]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	9201      	str	r2, [sp, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f9      	bne.n	80005f2 <HAL_RCC_OscConfig+0x16a>
 80005fe:	e750      	b.n	80004a2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000600:	f7ff fdd2 	bl	80001a8 <HAL_GetTick>
 8000604:	1b80      	subs	r0, r0, r6
 8000606:	2802      	cmp	r0, #2
 8000608:	d9e9      	bls.n	80005de <HAL_RCC_OscConfig+0x156>
 800060a:	e77f      	b.n	800050c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800060c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800060e:	f7ff fdcb 	bl	80001a8 <HAL_GetTick>
 8000612:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000616:	079f      	lsls	r7, r3, #30
 8000618:	f57f af43 	bpl.w	80004a2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800061c:	f7ff fdc4 	bl	80001a8 <HAL_GetTick>
 8000620:	1b80      	subs	r0, r0, r6
 8000622:	2802      	cmp	r0, #2
 8000624:	d9f6      	bls.n	8000614 <HAL_RCC_OscConfig+0x18c>
 8000626:	e771      	b.n	800050c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000628:	4c33      	ldr	r4, [pc, #204]	; (80006f8 <HAL_RCC_OscConfig+0x270>)
 800062a:	69e3      	ldr	r3, [r4, #28]
 800062c:	00d8      	lsls	r0, r3, #3
 800062e:	d424      	bmi.n	800067a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000630:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	69e3      	ldr	r3, [r4, #28]
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61e3      	str	r3, [r4, #28]
 800063a:	69e3      	ldr	r3, [r4, #28]
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000644:	4e30      	ldr	r6, [pc, #192]	; (8000708 <HAL_RCC_OscConfig+0x280>)
 8000646:	6833      	ldr	r3, [r6, #0]
 8000648:	05d9      	lsls	r1, r3, #23
 800064a:	d518      	bpl.n	800067e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800064c:	68eb      	ldr	r3, [r5, #12]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d126      	bne.n	80006a0 <HAL_RCC_OscConfig+0x218>
 8000652:	6a23      	ldr	r3, [r4, #32]
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800065a:	f7ff fda5 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800065e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000662:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000664:	6a23      	ldr	r3, [r4, #32]
 8000666:	079b      	lsls	r3, r3, #30
 8000668:	d53f      	bpl.n	80006ea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800066a:	2f00      	cmp	r7, #0
 800066c:	f43f af1d 	beq.w	80004aa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000670:	69e3      	ldr	r3, [r4, #28]
 8000672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000676:	61e3      	str	r3, [r4, #28]
 8000678:	e717      	b.n	80004aa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800067a:	2700      	movs	r7, #0
 800067c:	e7e2      	b.n	8000644 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800067e:	6833      	ldr	r3, [r6, #0]
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000686:	f7ff fd8f 	bl	80001a8 <HAL_GetTick>
 800068a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800068c:	6833      	ldr	r3, [r6, #0]
 800068e:	05da      	lsls	r2, r3, #23
 8000690:	d4dc      	bmi.n	800064c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000692:	f7ff fd89 	bl	80001a8 <HAL_GetTick>
 8000696:	eba0 0008 	sub.w	r0, r0, r8
 800069a:	2864      	cmp	r0, #100	; 0x64
 800069c:	d9f6      	bls.n	800068c <HAL_RCC_OscConfig+0x204>
 800069e:	e735      	b.n	800050c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a0:	b9ab      	cbnz	r3, 80006ce <HAL_RCC_OscConfig+0x246>
 80006a2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a8:	f023 0301 	bic.w	r3, r3, #1
 80006ac:	6223      	str	r3, [r4, #32]
 80006ae:	6a23      	ldr	r3, [r4, #32]
 80006b0:	f023 0304 	bic.w	r3, r3, #4
 80006b4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006b6:	f7ff fd77 	bl	80001a8 <HAL_GetTick>
 80006ba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006bc:	6a23      	ldr	r3, [r4, #32]
 80006be:	0798      	lsls	r0, r3, #30
 80006c0:	d5d3      	bpl.n	800066a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006c2:	f7ff fd71 	bl	80001a8 <HAL_GetTick>
 80006c6:	1b80      	subs	r0, r0, r6
 80006c8:	4540      	cmp	r0, r8
 80006ca:	d9f7      	bls.n	80006bc <HAL_RCC_OscConfig+0x234>
 80006cc:	e71e      	b.n	800050c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ce:	2b05      	cmp	r3, #5
 80006d0:	6a23      	ldr	r3, [r4, #32]
 80006d2:	d103      	bne.n	80006dc <HAL_RCC_OscConfig+0x254>
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6223      	str	r3, [r4, #32]
 80006da:	e7ba      	b.n	8000652 <HAL_RCC_OscConfig+0x1ca>
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	6223      	str	r3, [r4, #32]
 80006e2:	6a23      	ldr	r3, [r4, #32]
 80006e4:	f023 0304 	bic.w	r3, r3, #4
 80006e8:	e7b6      	b.n	8000658 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ea:	f7ff fd5d 	bl	80001a8 <HAL_GetTick>
 80006ee:	eba0 0008 	sub.w	r0, r0, r8
 80006f2:	42b0      	cmp	r0, r6
 80006f4:	d9b6      	bls.n	8000664 <HAL_RCC_OscConfig+0x1dc>
 80006f6:	e709      	b.n	800050c <HAL_RCC_OscConfig+0x84>
 80006f8:	40021000 	.word	0x40021000
 80006fc:	42420000 	.word	0x42420000
 8000700:	42420480 	.word	0x42420480
 8000704:	200001a4 	.word	0x200001a4
 8000708:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800070c:	4c22      	ldr	r4, [pc, #136]	; (8000798 <HAL_RCC_OscConfig+0x310>)
 800070e:	6863      	ldr	r3, [r4, #4]
 8000710:	f003 030c 	and.w	r3, r3, #12
 8000714:	2b08      	cmp	r3, #8
 8000716:	f43f aee2 	beq.w	80004de <HAL_RCC_OscConfig+0x56>
 800071a:	2300      	movs	r3, #0
 800071c:	4e1f      	ldr	r6, [pc, #124]	; (800079c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800071e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000720:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000722:	d12b      	bne.n	800077c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000724:	f7ff fd40 	bl	80001a8 <HAL_GetTick>
 8000728:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	0199      	lsls	r1, r3, #6
 800072e:	d41f      	bmi.n	8000770 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000730:	6a2b      	ldr	r3, [r5, #32]
 8000732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000736:	d105      	bne.n	8000744 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000738:	6862      	ldr	r2, [r4, #4]
 800073a:	68a9      	ldr	r1, [r5, #8]
 800073c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000740:	430a      	orrs	r2, r1
 8000742:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000744:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000746:	6862      	ldr	r2, [r4, #4]
 8000748:	430b      	orrs	r3, r1
 800074a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800074e:	4313      	orrs	r3, r2
 8000750:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000752:	2301      	movs	r3, #1
 8000754:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000756:	f7ff fd27 	bl	80001a8 <HAL_GetTick>
 800075a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	019a      	lsls	r2, r3, #6
 8000760:	f53f aea7 	bmi.w	80004b2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000764:	f7ff fd20 	bl	80001a8 <HAL_GetTick>
 8000768:	1b40      	subs	r0, r0, r5
 800076a:	2802      	cmp	r0, #2
 800076c:	d9f6      	bls.n	800075c <HAL_RCC_OscConfig+0x2d4>
 800076e:	e6cd      	b.n	800050c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000770:	f7ff fd1a 	bl	80001a8 <HAL_GetTick>
 8000774:	1bc0      	subs	r0, r0, r7
 8000776:	2802      	cmp	r0, #2
 8000778:	d9d7      	bls.n	800072a <HAL_RCC_OscConfig+0x2a2>
 800077a:	e6c7      	b.n	800050c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800077c:	f7ff fd14 	bl	80001a8 <HAL_GetTick>
 8000780:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	f57f ae94 	bpl.w	80004b2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800078a:	f7ff fd0d 	bl	80001a8 <HAL_GetTick>
 800078e:	1b40      	subs	r0, r0, r5
 8000790:	2802      	cmp	r0, #2
 8000792:	d9f6      	bls.n	8000782 <HAL_RCC_OscConfig+0x2fa>
 8000794:	e6ba      	b.n	800050c <HAL_RCC_OscConfig+0x84>
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000
 800079c:	42420060 	.word	0x42420060

080007a0 <HAL_RCC_GetSysClockFreq>:
{
 80007a0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <HAL_RCC_GetSysClockFreq+0x6c>)
{
 80007a4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007a6:	ac02      	add	r4, sp, #8
 80007a8:	f103 0510 	add.w	r5, r3, #16
 80007ac:	4622      	mov	r2, r4
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	6859      	ldr	r1, [r3, #4]
 80007b2:	3308      	adds	r3, #8
 80007b4:	c203      	stmia	r2!, {r0, r1}
 80007b6:	42ab      	cmp	r3, r5
 80007b8:	4614      	mov	r4, r2
 80007ba:	d1f7      	bne.n	80007ac <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007bc:	2301      	movs	r3, #1
 80007be:	f88d 3004 	strb.w	r3, [sp, #4]
 80007c2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007c4:	4912      	ldr	r1, [pc, #72]	; (8000810 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007c6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007ca:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007cc:	f003 020c 	and.w	r2, r3, #12
 80007d0:	2a08      	cmp	r2, #8
 80007d2:	d118      	bne.n	8000806 <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007d4:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007d8:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007da:	bf48      	it	mi
 80007dc:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007de:	a806      	add	r0, sp, #24
 80007e0:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e2:	bf48      	it	mi
 80007e4:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007e8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ec:	bf41      	itttt	mi
 80007ee:	aa06      	addmi	r2, sp, #24
 80007f0:	189b      	addmi	r3, r3, r2
 80007f2:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80007f6:	4b07      	ldrmi	r3, [pc, #28]	; (8000814 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007f8:	bf54      	ite	pl
 80007fa:	4b07      	ldrpl	r3, [pc, #28]	; (8000818 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80007fc:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000800:	4358      	muls	r0, r3
}
 8000802:	b007      	add	sp, #28
 8000804:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000808:	e7fb      	b.n	8000802 <HAL_RCC_GetSysClockFreq+0x62>
 800080a:	bf00      	nop
 800080c:	0800137c 	.word	0x0800137c
 8000810:	40021000 	.word	0x40021000
 8000814:	007a1200 	.word	0x007a1200
 8000818:	003d0900 	.word	0x003d0900

0800081c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081c:	4a4d      	ldr	r2, [pc, #308]	; (8000954 <HAL_RCC_ClockConfig+0x138>)
{
 800081e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000822:	6813      	ldr	r3, [r2, #0]
{
 8000824:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	428b      	cmp	r3, r1
{
 800082c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800082e:	d328      	bcc.n	8000882 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000830:	682a      	ldr	r2, [r5, #0]
 8000832:	0791      	lsls	r1, r2, #30
 8000834:	d432      	bmi.n	800089c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000836:	07d2      	lsls	r2, r2, #31
 8000838:	d438      	bmi.n	80008ac <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800083a:	4a46      	ldr	r2, [pc, #280]	; (8000954 <HAL_RCC_ClockConfig+0x138>)
 800083c:	6813      	ldr	r3, [r2, #0]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	429e      	cmp	r6, r3
 8000844:	d373      	bcc.n	800092e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000846:	682a      	ldr	r2, [r5, #0]
 8000848:	4c43      	ldr	r4, [pc, #268]	; (8000958 <HAL_RCC_ClockConfig+0x13c>)
 800084a:	f012 0f04 	tst.w	r2, #4
 800084e:	d179      	bne.n	8000944 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000850:	0713      	lsls	r3, r2, #28
 8000852:	d506      	bpl.n	8000862 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000854:	6863      	ldr	r3, [r4, #4]
 8000856:	692a      	ldr	r2, [r5, #16]
 8000858:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800085c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000860:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000862:	f7ff ff9d 	bl	80007a0 <HAL_RCC_GetSysClockFreq>
 8000866:	6863      	ldr	r3, [r4, #4]
 8000868:	4a3c      	ldr	r2, [pc, #240]	; (800095c <HAL_RCC_ClockConfig+0x140>)
 800086a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800086e:	5cd3      	ldrb	r3, [r2, r3]
 8000870:	40d8      	lsrs	r0, r3
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <HAL_RCC_ClockConfig+0x144>)
 8000874:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fc68 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800087c:	2000      	movs	r0, #0
}
 800087e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000882:	6813      	ldr	r3, [r2, #0]
 8000884:	f023 0307 	bic.w	r3, r3, #7
 8000888:	430b      	orrs	r3, r1
 800088a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800088c:	6813      	ldr	r3, [r2, #0]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	4299      	cmp	r1, r3
 8000894:	d0cc      	beq.n	8000830 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000896:	2001      	movs	r0, #1
 8000898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800089c:	492e      	ldr	r1, [pc, #184]	; (8000958 <HAL_RCC_ClockConfig+0x13c>)
 800089e:	68a8      	ldr	r0, [r5, #8]
 80008a0:	684b      	ldr	r3, [r1, #4]
 80008a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008a6:	4303      	orrs	r3, r0
 80008a8:	604b      	str	r3, [r1, #4]
 80008aa:	e7c4      	b.n	8000836 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ac:	686a      	ldr	r2, [r5, #4]
 80008ae:	4c2a      	ldr	r4, [pc, #168]	; (8000958 <HAL_RCC_ClockConfig+0x13c>)
 80008b0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008b4:	d11c      	bne.n	80008f0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ba:	d0ec      	beq.n	8000896 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008bc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008be:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008c2:	f023 0303 	bic.w	r3, r3, #3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008ca:	f7ff fc6d 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ce:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008d0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d114      	bne.n	8000900 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008d6:	6863      	ldr	r3, [r4, #4]
 80008d8:	f003 030c 	and.w	r3, r3, #12
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d0ac      	beq.n	800083a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008e0:	f7ff fc62 	bl	80001a8 <HAL_GetTick>
 80008e4:	1bc0      	subs	r0, r0, r7
 80008e6:	4540      	cmp	r0, r8
 80008e8:	d9f5      	bls.n	80008d6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80008ea:	2003      	movs	r0, #3
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008f0:	2a02      	cmp	r2, #2
 80008f2:	d102      	bne.n	80008fa <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008f8:	e7df      	b.n	80008ba <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fa:	f013 0f02 	tst.w	r3, #2
 80008fe:	e7dc      	b.n	80008ba <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000900:	2b02      	cmp	r3, #2
 8000902:	d10f      	bne.n	8000924 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	f003 030c 	and.w	r3, r3, #12
 800090a:	2b08      	cmp	r3, #8
 800090c:	d095      	beq.n	800083a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800090e:	f7ff fc4b 	bl	80001a8 <HAL_GetTick>
 8000912:	1bc0      	subs	r0, r0, r7
 8000914:	4540      	cmp	r0, r8
 8000916:	d9f5      	bls.n	8000904 <HAL_RCC_ClockConfig+0xe8>
 8000918:	e7e7      	b.n	80008ea <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800091a:	f7ff fc45 	bl	80001a8 <HAL_GetTick>
 800091e:	1bc0      	subs	r0, r0, r7
 8000920:	4540      	cmp	r0, r8
 8000922:	d8e2      	bhi.n	80008ea <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000924:	6863      	ldr	r3, [r4, #4]
 8000926:	f013 0f0c 	tst.w	r3, #12
 800092a:	d1f6      	bne.n	800091a <HAL_RCC_ClockConfig+0xfe>
 800092c:	e785      	b.n	800083a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	f023 0307 	bic.w	r3, r3, #7
 8000934:	4333      	orrs	r3, r6
 8000936:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000938:	6813      	ldr	r3, [r2, #0]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	429e      	cmp	r6, r3
 8000940:	d1a9      	bne.n	8000896 <HAL_RCC_ClockConfig+0x7a>
 8000942:	e780      	b.n	8000846 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000944:	6863      	ldr	r3, [r4, #4]
 8000946:	68e9      	ldr	r1, [r5, #12]
 8000948:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800094c:	430b      	orrs	r3, r1
 800094e:	6063      	str	r3, [r4, #4]
 8000950:	e77e      	b.n	8000850 <HAL_RCC_ClockConfig+0x34>
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000
 8000958:	40021000 	.word	0x40021000
 800095c:	0800138c 	.word	0x0800138c
 8000960:	200001a4 	.word	0x200001a4

08000964 <HAL_RCC_GetHCLKFreq>:
}
 8000964:	4b01      	ldr	r3, [pc, #4]	; (800096c <HAL_RCC_GetHCLKFreq+0x8>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200001a4 	.word	0x200001a4

08000970 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000970:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000974:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000976:	2b01      	cmp	r3, #1
 8000978:	f04f 0302 	mov.w	r3, #2
 800097c:	d01c      	beq.n	80009b8 <HAL_TIM_ConfigClockSource+0x48>
 800097e:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000980:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000984:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000986:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800098a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800098c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000990:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000994:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000996:	680a      	ldr	r2, [r1, #0]
 8000998:	2a40      	cmp	r2, #64	; 0x40
 800099a:	d079      	beq.n	8000a90 <HAL_TIM_ConfigClockSource+0x120>
 800099c:	d819      	bhi.n	80009d2 <HAL_TIM_ConfigClockSource+0x62>
 800099e:	2a10      	cmp	r2, #16
 80009a0:	f000 8093 	beq.w	8000aca <HAL_TIM_ConfigClockSource+0x15a>
 80009a4:	d80a      	bhi.n	80009bc <HAL_TIM_ConfigClockSource+0x4c>
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	f000 8089 	beq.w	8000abe <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80009ac:	2301      	movs	r3, #1
 80009ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80009b2:	2300      	movs	r3, #0
 80009b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80009b8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80009bc:	2a20      	cmp	r2, #32
 80009be:	f000 808a 	beq.w	8000ad6 <HAL_TIM_ConfigClockSource+0x166>
 80009c2:	2a30      	cmp	r2, #48	; 0x30
 80009c4:	d1f2      	bne.n	80009ac <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80009c6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80009c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80009cc:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80009d0:	e036      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80009d2:	2a70      	cmp	r2, #112	; 0x70
 80009d4:	d036      	beq.n	8000a44 <HAL_TIM_ConfigClockSource+0xd4>
 80009d6:	d81b      	bhi.n	8000a10 <HAL_TIM_ConfigClockSource+0xa0>
 80009d8:	2a50      	cmp	r2, #80	; 0x50
 80009da:	d042      	beq.n	8000a62 <HAL_TIM_ConfigClockSource+0xf2>
 80009dc:	2a60      	cmp	r2, #96	; 0x60
 80009de:	d1e5      	bne.n	80009ac <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80009e0:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80009e2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80009e4:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80009e8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80009ea:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80009ec:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80009ee:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80009f0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80009f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80009f8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80009fc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000a00:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a02:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000a04:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a0a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000a0e:	e017      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a10:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000a14:	d011      	beq.n	8000a3a <HAL_TIM_ConfigClockSource+0xca>
 8000a16:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a1a:	d1c7      	bne.n	80009ac <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a1c:	688a      	ldr	r2, [r1, #8]
 8000a1e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000a20:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a22:	68c9      	ldr	r1, [r1, #12]
 8000a24:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a26:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a2e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000a30:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a38:	e002      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	e7b3      	b.n	80009ac <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a44:	688a      	ldr	r2, [r1, #8]
 8000a46:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000a48:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a4a:	68c9      	ldr	r1, [r1, #12]
 8000a4c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a4e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a56:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000a58:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000a5a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000a5c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000a60:	e7ee      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000a62:	684c      	ldr	r4, [r1, #4]
 8000a64:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000a66:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a68:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000a6a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a6e:	f025 0501 	bic.w	r5, r5, #1
 8000a72:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a74:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000a76:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000a78:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000a7c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a82:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000a84:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a8a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000a8e:	e7d7      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000a90:	684c      	ldr	r4, [r1, #4]
 8000a92:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000a94:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a96:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000a98:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a9c:	f025 0501 	bic.w	r5, r5, #1
 8000aa0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000aa2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000aa4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000aa6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000aaa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ab0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ab2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ab4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ab8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000abc:	e7c0      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000abe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ac0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ac4:	f042 0207 	orr.w	r2, r2, #7
 8000ac8:	e7ba      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000aca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000acc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ad0:	f042 0217 	orr.w	r2, r2, #23
 8000ad4:	e7b4      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000ad6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ad8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000adc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000ae0:	e7ae      	b.n	8000a40 <HAL_TIM_ConfigClockSource+0xd0>
	...

08000ae4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000ae6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ae8:	4290      	cmp	r0, r2
 8000aea:	d00a      	beq.n	8000b02 <TIM_Base_SetConfig+0x1e>
 8000aec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000af0:	d007      	beq.n	8000b02 <TIM_Base_SetConfig+0x1e>
 8000af2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000af6:	4290      	cmp	r0, r2
 8000af8:	d003      	beq.n	8000b02 <TIM_Base_SetConfig+0x1e>
 8000afa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000afe:	4290      	cmp	r0, r2
 8000b00:	d115      	bne.n	8000b2e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000b02:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000b08:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <TIM_Base_SetConfig+0x6c>)
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	d00a      	beq.n	8000b26 <TIM_Base_SetConfig+0x42>
 8000b10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b14:	d007      	beq.n	8000b26 <TIM_Base_SetConfig+0x42>
 8000b16:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b1a:	4290      	cmp	r0, r2
 8000b1c:	d003      	beq.n	8000b26 <TIM_Base_SetConfig+0x42>
 8000b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b22:	4290      	cmp	r0, r2
 8000b24:	d103      	bne.n	8000b2e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b26:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b2c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000b2e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000b34:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000b36:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000b38:	688b      	ldr	r3, [r1, #8]
 8000b3a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000b3c:	680b      	ldr	r3, [r1, #0]
 8000b3e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <TIM_Base_SetConfig+0x6c>)
 8000b42:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000b44:	bf04      	itt	eq
 8000b46:	690b      	ldreq	r3, [r1, #16]
 8000b48:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	6143      	str	r3, [r0, #20]
 8000b4e:	4770      	bx	lr
 8000b50:	40012c00 	.word	0x40012c00

08000b54 <HAL_TIM_Base_Init>:
{
 8000b54:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000b56:	4604      	mov	r4, r0
 8000b58:	b1a0      	cbz	r0, 8000b84 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000b5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b62:	b91b      	cbnz	r3, 8000b6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000b64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000b68:	f000 fb6a 	bl	8001240 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000b6c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000b6e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000b70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000b74:	1d21      	adds	r1, r4, #4
 8000b76:	f7ff ffb5 	bl	8000ae4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000b7a:	2301      	movs	r3, #1
  return HAL_OK;
 8000b7c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000b7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000b82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b84:	2001      	movs	r0, #1
}
 8000b86:	bd10      	pop	{r4, pc}

08000b88 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000b88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000b8c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	f04f 0302 	mov.w	r3, #2
 8000b94:	d018      	beq.n	8000bc8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000b96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000b9a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000b9c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000b9e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000ba0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000ba2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ba6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	4322      	orrs	r2, r4
 8000bac:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000bc8:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000bca:	bd10      	pop	{r4, pc}

08000bcc <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bcc:	2302      	movs	r3, #2
{
 8000bce:	b510      	push	{r4, lr}
 8000bd0:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bdc:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000be0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f7ff fc51 	bl	8000488 <HAL_RCC_OscConfig>
 8000be6:	4601      	mov	r1, r0
 8000be8:	b100      	cbz	r0, 8000bec <SystemClock_Config+0x20>
 8000bea:	e7fe      	b.n	8000bea <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000bf0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bf4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000bf6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bfa:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfe:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c00:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c02:	f7ff fe0b 	bl	800081c <HAL_RCC_ClockConfig>
 8000c06:	4604      	mov	r4, r0
 8000c08:	b100      	cbz	r0, 8000c0c <SystemClock_Config+0x40>
 8000c0a:	e7fe      	b.n	8000c0a <SystemClock_Config+0x3e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c0c:	f7ff feaa 	bl	8000964 <HAL_RCC_GetHCLKFreq>
 8000c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c14:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c18:	f7ff fb22 	bl	8000260 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c1c:	2004      	movs	r0, #4
 8000c1e:	f7ff fb35 	bl	800028c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c22:	4622      	mov	r2, r4
 8000c24:	4621      	mov	r1, r4
 8000c26:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2a:	f7ff fae5 	bl	80001f8 <HAL_NVIC_SetPriority>
}
 8000c2e:	b010      	add	sp, #64	; 0x40
 8000c30:	bd10      	pop	{r4, pc}
	...

08000c34 <PinASet>:

}

void PinASet(uint16_t GPIO_Pin)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_Pin, GPIO_PIN_SET);
 8000c34:	4601      	mov	r1, r0
 8000c36:	2201      	movs	r2, #1
 8000c38:	4801      	ldr	r0, [pc, #4]	; (8000c40 <PinASet+0xc>)
 8000c3a:	f7ff bc1f 	b.w	800047c <HAL_GPIO_WritePin>
 8000c3e:	bf00      	nop
 8000c40:	40010800 	.word	0x40010800

08000c44 <PinAReset>:
}

void PinAReset(uint16_t GPIO_Pin)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_Pin, GPIO_PIN_RESET);
 8000c44:	4601      	mov	r1, r0
 8000c46:	2200      	movs	r2, #0
 8000c48:	4801      	ldr	r0, [pc, #4]	; (8000c50 <PinAReset+0xc>)
 8000c4a:	f7ff bc17 	b.w	800047c <HAL_GPIO_WritePin>
 8000c4e:	bf00      	nop
 8000c50:	40010800 	.word	0x40010800

08000c54 <SendBitSet>:
}

void SendBitSet(void)
{
 8000c54:	b508      	push	{r3, lr}
	PinAReset(CLK_Pin);
 8000c56:	2008      	movs	r0, #8
 8000c58:	f7ff fff4 	bl	8000c44 <PinAReset>
	PinASet(DIN_Pin);
 8000c5c:	2010      	movs	r0, #16
 8000c5e:	f7ff ffe9 	bl	8000c34 <PinASet>
	PinASet(CLK_Pin);
}
 8000c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PinASet(CLK_Pin);
 8000c66:	2008      	movs	r0, #8
 8000c68:	f7ff bfe4 	b.w	8000c34 <PinASet>

08000c6c <SendBitClr>:

void SendBitClr(void)
{
 8000c6c:	b508      	push	{r3, lr}
	PinAReset(CLK_Pin);
 8000c6e:	2008      	movs	r0, #8
 8000c70:	f7ff ffe8 	bl	8000c44 <PinAReset>
	PinAReset(DIN_Pin);
 8000c74:	2010      	movs	r0, #16
 8000c76:	f7ff ffe5 	bl	8000c44 <PinAReset>
	PinASet(CLK_Pin);
}
 8000c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PinASet(CLK_Pin);
 8000c7e:	2008      	movs	r0, #8
 8000c80:	f7ff bfd8 	b.w	8000c34 <PinASet>

08000c84 <SendByte>:

void SendByte(uint8_t Byte)
{
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	4605      	mov	r5, r0
	uint8_t i;
	PinAReset(CE_Pin);
 8000c88:	2040      	movs	r0, #64	; 0x40
 8000c8a:	f7ff ffdb 	bl	8000c44 <PinAReset>
 8000c8e:	2407      	movs	r4, #7
	for (i=7; i<=7; i--)
	{
		if ( Byte&(1<<i) )
 8000c90:	fa45 f304 	asr.w	r3, r5, r4
 8000c94:	07db      	lsls	r3, r3, #31
 8000c96:	d509      	bpl.n	8000cac <SendByte+0x28>
			SendBitSet();
 8000c98:	f7ff ffdc 	bl	8000c54 <SendBitSet>
	for (i=7; i<=7; i--)
 8000c9c:	f114 34ff 	adds.w	r4, r4, #4294967295
 8000ca0:	d2f6      	bcs.n	8000c90 <SendByte+0xc>
		else
			SendBitClr();
	}
	PinASet(CE_Pin);
}
 8000ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PinASet(CE_Pin);
 8000ca6:	2040      	movs	r0, #64	; 0x40
 8000ca8:	f7ff bfc4 	b.w	8000c34 <PinASet>
			SendBitClr();
 8000cac:	f7ff ffde 	bl	8000c6c <SendBitClr>
 8000cb0:	e7f4      	b.n	8000c9c <SendByte+0x18>

08000cb2 <SendData>:

void SendData(uint8_t Data)
{
 8000cb2:	b510      	push	{r4, lr}
 8000cb4:	4604      	mov	r4, r0
	PinASet(DC_Pin);
 8000cb6:	2020      	movs	r0, #32
 8000cb8:	f7ff ffbc 	bl	8000c34 <PinASet>
	SendByte(Data);
 8000cbc:	4620      	mov	r0, r4
}
 8000cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SendByte(Data);
 8000cc2:	f7ff bfdf 	b.w	8000c84 <SendByte>

08000cc6 <SendCom>:

void SendCom(uint8_t Command)
{
 8000cc6:	b510      	push	{r4, lr}
 8000cc8:	4604      	mov	r4, r0
	PinAReset(DC_Pin);
 8000cca:	2020      	movs	r0, #32
 8000ccc:	f7ff ffba 	bl	8000c44 <PinAReset>
	SendByte(Command);
 8000cd0:	4620      	mov	r0, r4
}
 8000cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SendByte(Command);
 8000cd6:	f7ff bfd5 	b.w	8000c84 <SendByte>

08000cda <LCD_Init>:
{
 8000cda:	b508      	push	{r3, lr}
	PinASet(CE_Pin);
 8000cdc:	2040      	movs	r0, #64	; 0x40
 8000cde:	f7ff ffa9 	bl	8000c34 <PinASet>
	PinAReset(RST_Pin);
 8000ce2:	2080      	movs	r0, #128	; 0x80
 8000ce4:	f7ff ffae 	bl	8000c44 <PinAReset>
	PinASet(RST_Pin);
 8000ce8:	2080      	movs	r0, #128	; 0x80
 8000cea:	f7ff ffa3 	bl	8000c34 <PinASet>
	SendCom(Byte);
 8000cee:	2021      	movs	r0, #33	; 0x21
 8000cf0:	f7ff ffe9 	bl	8000cc6 <SendCom>
	SendCom(Byte);
 8000cf4:	2013      	movs	r0, #19
 8000cf6:	f7ff ffe6 	bl	8000cc6 <SendCom>
	SendCom(Byte);
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f7ff ffe3 	bl	8000cc6 <SendCom>
	SendCom(Byte);
 8000d00:	20c0      	movs	r0, #192	; 0xc0
 8000d02:	f7ff ffe0 	bl	8000cc6 <SendCom>
	SendCom(Byte);
 8000d06:	2020      	movs	r0, #32
 8000d08:	f7ff ffdd 	bl	8000cc6 <SendCom>
}
 8000d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SendCom(Byte);
 8000d10:	200c      	movs	r0, #12
 8000d12:	f7ff bfd8 	b.w	8000cc6 <SendCom>
	...

08000d18 <XadressLCD>:

void XadressLCD(void)
{
	SendCom(0b10000000 + x_adr);
 8000d18:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <XadressLCD+0xc>)
 8000d1a:	7818      	ldrb	r0, [r3, #0]
 8000d1c:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8000d20:	f7ff bfd1 	b.w	8000cc6 <SendCom>
 8000d24:	200001d0 	.word	0x200001d0

08000d28 <YadressLCD>:
}

void YadressLCD(void)
{
	SendCom(0b01000000 + y_adr);
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <YadressLCD+0xc>)
 8000d2a:	7818      	ldrb	r0, [r3, #0]
 8000d2c:	3040      	adds	r0, #64	; 0x40
 8000d2e:	b2c0      	uxtb	r0, r0
 8000d30:	f7ff bfc9 	b.w	8000cc6 <SendCom>
 8000d34:	200001d1 	.word	0x200001d1

08000d38 <LCD_RAM_Clr>:
}

void LCD_RAM_Clr(void)
{
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	24fc      	movs	r4, #252	; 0xfc
	uint8_t i, byte;

	byte = 0;
	for (i=0; i<252; i++)
		SendData(byte);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	f7ff ffb7 	bl	8000cb2 <SendData>
	for (i=0; i<252; i++)
 8000d44:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8000d48:	d1f8      	bne.n	8000d3c <LCD_RAM_Clr+0x4>
	x_adr = 0;
	y_adr = 3;
 8000d4a:	2203      	movs	r2, #3
	x_adr = 0;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <LCD_RAM_Clr+0x38>)
 8000d4e:	701c      	strb	r4, [r3, #0]
	y_adr = 3;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <LCD_RAM_Clr+0x3c>)
	XadressLCD();
	YadressLCD();
 8000d52:	24fc      	movs	r4, #252	; 0xfc
	y_adr = 3;
 8000d54:	701a      	strb	r2, [r3, #0]
	XadressLCD();
 8000d56:	f7ff ffdf 	bl	8000d18 <XadressLCD>
	YadressLCD();
 8000d5a:	f7ff ffe5 	bl	8000d28 <YadressLCD>
	for (i=0; i<252; i++)
		SendData(byte);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	3c01      	subs	r4, #1
 8000d62:	f7ff ffa6 	bl	8000cb2 <SendData>
	for (i=0; i<252; i++)
 8000d66:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8000d6a:	d1f8      	bne.n	8000d5e <LCD_RAM_Clr+0x26>
}
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001d0 	.word	0x200001d0
 8000d74:	200001d1 	.word	0x200001d1

08000d78 <PrintFrame>:
{
	uint8_t i;
	uint8_t byte;
	/*uint16_t delay;*/

	x_adr = 0;
 8000d78:	2300      	movs	r3, #0
{
 8000d7a:	b570      	push	{r4, r5, r6, lr}
	x_adr = 0;
 8000d7c:	4d38      	ldr	r5, [pc, #224]	; (8000e60 <PrintFrame+0xe8>)
	y_adr = 3;
 8000d7e:	4c39      	ldr	r4, [pc, #228]	; (8000e64 <PrintFrame+0xec>)
	x_adr = 0;
 8000d80:	702b      	strb	r3, [r5, #0]
	y_adr = 3;
 8000d82:	2303      	movs	r3, #3
	XadressLCD();
	YadressLCD();
 8000d84:	2654      	movs	r6, #84	; 0x54
	y_adr = 3;
 8000d86:	7023      	strb	r3, [r4, #0]
	XadressLCD();
 8000d88:	f7ff ffc6 	bl	8000d18 <XadressLCD>
	YadressLCD();
 8000d8c:	f7ff ffcc 	bl	8000d28 <YadressLCD>
	for (i=0; i<84; i++)
	{
		byte = 1;
		SendData(byte);
 8000d90:	2001      	movs	r0, #1
 8000d92:	3e01      	subs	r6, #1
 8000d94:	f7ff ff8d 	bl	8000cb2 <SendData>
	for (i=0; i<84; i++)
 8000d98:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8000d9c:	d1f8      	bne.n	8000d90 <PrintFrame+0x18>
	}
	x_adr = 0;
	y_adr = 5;
 8000d9e:	2305      	movs	r3, #5
	x_adr = 0;
 8000da0:	702e      	strb	r6, [r5, #0]
	y_adr = 5;
 8000da2:	7023      	strb	r3, [r4, #0]
	XadressLCD();
	YadressLCD();
 8000da4:	2654      	movs	r6, #84	; 0x54
	XadressLCD();
 8000da6:	f7ff ffb7 	bl	8000d18 <XadressLCD>
	YadressLCD();
 8000daa:	f7ff ffbd 	bl	8000d28 <YadressLCD>
	for (i=0; i<84; i++)
	{
		byte = 0b10000000;
		SendData(byte);
 8000dae:	2080      	movs	r0, #128	; 0x80
 8000db0:	3e01      	subs	r6, #1
 8000db2:	f7ff ff7e 	bl	8000cb2 <SendData>
	for (i=0; i<84; i++)
 8000db6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8000dba:	d1f8      	bne.n	8000dae <PrintFrame+0x36>
	}

	x_adr = 0;
 8000dbc:	702e      	strb	r6, [r5, #0]
	y_adr = 0;
 8000dbe:	7026      	strb	r6, [r4, #0]
	XadressLCD();
 8000dc0:	f7ff ffaa 	bl	8000d18 <XadressLCD>
	YadressLCD();
 8000dc4:	2654      	movs	r6, #84	; 0x54
 8000dc6:	f7ff ffaf 	bl	8000d28 <YadressLCD>
	for (i=0; i<84; i++)
	{
		byte = 1;
		SendData(byte);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	3e01      	subs	r6, #1
 8000dce:	f7ff ff70 	bl	8000cb2 <SendData>
	for (i=0; i<84; i++)
 8000dd2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8000dd6:	d1f8      	bne.n	8000dca <PrintFrame+0x52>
	}

	x_adr = 0;
	y_adr = 2;
 8000dd8:	2302      	movs	r3, #2
	x_adr = 0;
 8000dda:	702e      	strb	r6, [r5, #0]
	y_adr = 2;
 8000ddc:	7023      	strb	r3, [r4, #0]
	XadressLCD();
	YadressLCD();
 8000dde:	2654      	movs	r6, #84	; 0x54
	XadressLCD();
 8000de0:	f7ff ff9a 	bl	8000d18 <XadressLCD>
	YadressLCD();
 8000de4:	f7ff ffa0 	bl	8000d28 <YadressLCD>
	for (i=0; i<84; i++)
	{
		byte = 0b10000000;
		SendData(byte);
 8000de8:	2080      	movs	r0, #128	; 0x80
 8000dea:	3e01      	subs	r6, #1
 8000dec:	f7ff ff61 	bl	8000cb2 <SendData>
	for (i=0; i<84; i++)
 8000df0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8000df4:	d1f8      	bne.n	8000de8 <PrintFrame+0x70>
	}

	byte = 0b00100010;	//vertical adressation
	SendCom(byte);
 8000df6:	2022      	movs	r0, #34	; 0x22
 8000df8:	f7ff ff65 	bl	8000cc6 <SendCom>

	x_adr = 0;
 8000dfc:	702e      	strb	r6, [r5, #0]
	y_adr = 0;
 8000dfe:	7026      	strb	r6, [r4, #0]
	XadressLCD();
 8000e00:	f7ff ff8a 	bl	8000d18 <XadressLCD>
	YadressLCD();
 8000e04:	2606      	movs	r6, #6
 8000e06:	f7ff ff8f 	bl	8000d28 <YadressLCD>
	for (i=0; i<6; i++)
	{
		byte = 0xFF;
		SendData(byte);
 8000e0a:	20ff      	movs	r0, #255	; 0xff
 8000e0c:	3e01      	subs	r6, #1
 8000e0e:	f7ff ff50 	bl	8000cb2 <SendData>
	for (i=0; i<6; i++)
 8000e12:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8000e16:	d1f8      	bne.n	8000e0a <PrintFrame+0x92>
	}

//	for (delay = 0xFFFF; delay !=0; delay--)
//			;

	x_adr = 83;
 8000e18:	2353      	movs	r3, #83	; 0x53
	y_adr = 0;
 8000e1a:	7026      	strb	r6, [r4, #0]
	x_adr = 83;
 8000e1c:	702b      	strb	r3, [r5, #0]
	XadressLCD();
	YadressLCD();
 8000e1e:	2606      	movs	r6, #6
	XadressLCD();
 8000e20:	f7ff ff7a 	bl	8000d18 <XadressLCD>
	YadressLCD();
 8000e24:	f7ff ff80 	bl	8000d28 <YadressLCD>
	for (i=0; i<6; i++)
	{
		byte = 0xFF;
		SendData(byte);
 8000e28:	20ff      	movs	r0, #255	; 0xff
 8000e2a:	3e01      	subs	r6, #1
 8000e2c:	f7ff ff41 	bl	8000cb2 <SendData>
	for (i=0; i<6; i++)
 8000e30:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8000e34:	d1f8      	bne.n	8000e28 <PrintFrame+0xb0>
	}

//	for (delay = 0xFFFF; delay !=0; delay--)
//			;
	x_adr = 64;
 8000e36:	2340      	movs	r3, #64	; 0x40
	y_adr = 0;
 8000e38:	7026      	strb	r6, [r4, #0]
	x_adr = 64;
 8000e3a:	702b      	strb	r3, [r5, #0]
	XadressLCD();
	YadressLCD();
 8000e3c:	2406      	movs	r4, #6
	XadressLCD();
 8000e3e:	f7ff ff6b 	bl	8000d18 <XadressLCD>
	YadressLCD();
 8000e42:	f7ff ff71 	bl	8000d28 <YadressLCD>
	for (i=0; i<6; i++)
	{
		byte = 0xFF;
		SendData(byte);
 8000e46:	20ff      	movs	r0, #255	; 0xff
 8000e48:	3c01      	subs	r4, #1
 8000e4a:	f7ff ff32 	bl	8000cb2 <SendData>
	for (i=0; i<6; i++)
 8000e4e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8000e52:	d1f8      	bne.n	8000e46 <PrintFrame+0xce>
//	for (delay = 0xFFFF; delay !=0; delay--)
//			;

	byte = 0b00100000;	//horisontal adressation back
	SendCom(byte);
}
 8000e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SendCom(byte);
 8000e58:	2020      	movs	r0, #32
 8000e5a:	f7ff bf34 	b.w	8000cc6 <SendCom>
 8000e5e:	bf00      	nop
 8000e60:	200001d0 	.word	0x200001d0
 8000e64:	200001d1 	.word	0x200001d1

08000e68 <PinAOut>:
	x_adr += 6;
	XadressLCD();
}

void PinAOut(uint16_t GPIO_Pin)
{
 8000e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2302      	movs	r3, #2
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e70:	9000      	str	r0, [sp, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	4669      	mov	r1, sp
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <PinAOut+0x1c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f7ff fa1a 	bl	80002b0 <HAL_GPIO_Init>

}
 8000e7c:	b005      	add	sp, #20
 8000e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e82:	bf00      	nop
 8000e84:	40010800 	.word	0x40010800

08000e88 <PinAIn>:

void PinAIn(uint16_t GPIO_Pin)
{
 8000e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8e:	2301      	movs	r3, #1
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e90:	9000      	str	r0, [sp, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	4669      	mov	r1, sp
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <PinAIn+0x1c>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e96:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f7ff fa0a 	bl	80002b0 <HAL_GPIO_Init>
}
 8000e9c:	b005      	add	sp, #20
 8000e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ea2:	bf00      	nop
 8000ea4:	40010800 	.word	0x40010800

08000ea8 <StartDHT>:

void StartDHT(uint16_t GPIO_Pin)
{
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4604      	mov	r4, r0
	PinAOut(GPIO_Pin);
 8000eac:	f7ff ffdc 	bl	8000e68 <PinAOut>
	PinAReset(GPIO_Pin);
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fec7 	bl	8000c44 <PinAReset>
	HAL_Delay(2);				/*delay 2ms*/
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f7ff f97c 	bl	80001b4 <HAL_Delay>
	PinAIn(GPIO_Pin);
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff ffe3 	bl	8000e88 <PinAIn>

	while( HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)==GPIO_PIN_SET );
 8000ec2:	4d0b      	ldr	r5, [pc, #44]	; (8000ef0 <StartDHT+0x48>)
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f7ff fad2 	bl	8000470 <HAL_GPIO_ReadPin>
 8000ecc:	2801      	cmp	r0, #1
 8000ece:	d0f9      	beq.n	8000ec4 <StartDHT+0x1c>
	while( HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)==GPIO_PIN_RESET );
 8000ed0:	4d07      	ldr	r5, [pc, #28]	; (8000ef0 <StartDHT+0x48>)
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	f7ff facb 	bl	8000470 <HAL_GPIO_ReadPin>
 8000eda:	2800      	cmp	r0, #0
 8000edc:	d0f9      	beq.n	8000ed2 <StartDHT+0x2a>
	while( HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)==GPIO_PIN_SET );
 8000ede:	4d04      	ldr	r5, [pc, #16]	; (8000ef0 <StartDHT+0x48>)
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	f7ff fac4 	bl	8000470 <HAL_GPIO_ReadPin>
 8000ee8:	2801      	cmp	r0, #1
 8000eea:	d0f9      	beq.n	8000ee0 <StartDHT+0x38>


}
 8000eec:	bd38      	pop	{r3, r4, r5, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <ReadDHT>:

void ReadDHT(uint16_t GPIO_Pin)
{
 8000ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef8:	4607      	mov	r7, r0

	for(i=0; i<5; i++)
	{
		for(j=7; j<=7; j--)
		{
			TIM2->CNT = 0;
 8000efa:	f04f 0800 	mov.w	r8, #0
	StartDHT(GPIO_Pin);
 8000efe:	f7ff ffd3 	bl	8000ea8 <StartDHT>
 8000f02:	4c18      	ldr	r4, [pc, #96]	; (8000f64 <ReadDHT+0x70>)
			while( HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)==GPIO_PIN_RESET );
 8000f04:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8000f68 <ReadDHT+0x74>
 8000f08:	f104 0a05 	add.w	sl, r4, #5
{
 8000f0c:	2507      	movs	r5, #7
			TIM2->CNT = 0;
 8000f0e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
			TIM2->CR1 = 1;
 8000f12:	f04f 0b01 	mov.w	fp, #1
			TIM2->CNT = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	6273      	str	r3, [r6, #36]	; 0x24
			while( HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)==GPIO_PIN_RESET );
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	4648      	mov	r0, r9
 8000f1e:	f7ff faa7 	bl	8000470 <HAL_GPIO_ReadPin>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d0f9      	beq.n	8000f1a <ReadDHT+0x26>
			TIM2->CR1 = 1;
 8000f26:	f8c6 b000 	str.w	fp, [r6]
			while( HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)==GPIO_PIN_SET );
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	4648      	mov	r0, r9
 8000f2e:	f7ff fa9f 	bl	8000470 <HAL_GPIO_ReadPin>
 8000f32:	2801      	cmp	r0, #1
 8000f34:	d0f9      	beq.n	8000f2a <ReadDHT+0x36>
			TIM2->CR1 = 0;
 8000f36:	f8c6 8000 	str.w	r8, [r6]

			if( (TIM2->CNT)>MICROSECONDS50 )	/*75us: data bit=1*/
 8000f3a:	6a72      	ldr	r2, [r6, #36]	; 0x24
				dataDHT[i] |= 1<<j;				/*25us: data bit=0*/
 8000f3c:	7821      	ldrb	r1, [r4, #0]
			if( (TIM2->CNT)>MICROSECONDS50 )	/*75us: data bit=1*/
 8000f3e:	2a32      	cmp	r2, #50	; 0x32
				dataDHT[i] |= 1<<j;				/*25us: data bit=0*/
 8000f40:	fa0b f205 	lsl.w	r2, fp, r5
		for(j=7; j<=7; j--)
 8000f44:	f105 35ff 	add.w	r5, r5, #4294967295
 8000f48:	b2ed      	uxtb	r5, r5
				dataDHT[i] |= 1<<j;				/*25us: data bit=0*/
 8000f4a:	bf8c      	ite	hi
 8000f4c:	430a      	orrhi	r2, r1
			else
				dataDHT[i] &= ~(1<<j);
 8000f4e:	ea21 0202 	bicls.w	r2, r1, r2
		for(j=7; j<=7; j--)
 8000f52:	2dff      	cmp	r5, #255	; 0xff
				dataDHT[i] &= ~(1<<j);
 8000f54:	7022      	strb	r2, [r4, #0]
		for(j=7; j<=7; j--)
 8000f56:	d1de      	bne.n	8000f16 <ReadDHT+0x22>
 8000f58:	3401      	adds	r4, #1
	for(i=0; i<5; i++)
 8000f5a:	45a2      	cmp	sl, r4
 8000f5c:	d1d6      	bne.n	8000f0c <ReadDHT+0x18>
 8000f5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f62:	bf00      	nop
 8000f64:	200001c8 	.word	0x200001c8
 8000f68:	40010800 	.word	0x40010800

08000f6c <PrintBig>:
	y_adr += 1;
	YadressLCD();
}

void PrintBig(uint8_t num[][14])
{
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	2400      	movs	r4, #0
	uint8_t i, j;

	for(i=0; i<3; i++)
	{
		XadressLCD();
		if( y_adr<3 )
 8000f70:	4f0b      	ldr	r7, [pc, #44]	; (8000fa0 <PrintBig+0x34>)
 8000f72:	1e45      	subs	r5, r0, #1
		XadressLCD();
 8000f74:	f7ff fed0 	bl	8000d18 <XadressLCD>
		if( y_adr<3 )
 8000f78:	783b      	ldrb	r3, [r7, #0]
 8000f7a:	b2e6      	uxtb	r6, r4
 8000f7c:	2b02      	cmp	r3, #2
			y_adr = i;
		else
			y_adr = i+3;
 8000f7e:	bf88      	it	hi
 8000f80:	3603      	addhi	r6, #3
 8000f82:	703e      	strb	r6, [r7, #0]
		YadressLCD();
 8000f84:	f7ff fed0 	bl	8000d28 <YadressLCD>
 8000f88:	f105 060e 	add.w	r6, r5, #14

		for(j=0; j<14; j++)
			SendData( num[i][j] );
 8000f8c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000f90:	f7ff fe8f 	bl	8000cb2 <SendData>
		for(j=0; j<14; j++)
 8000f94:	42b5      	cmp	r5, r6
 8000f96:	d1f9      	bne.n	8000f8c <PrintBig+0x20>
 8000f98:	3401      	adds	r4, #1
	for(i=0; i<3; i++)
 8000f9a:	2c03      	cmp	r4, #3
 8000f9c:	d1ea      	bne.n	8000f74 <PrintBig+0x8>
	}

}
 8000f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fa0:	200001d1 	.word	0x200001d1

08000fa4 <PrintToBig>:

void PrintToBig(uint8_t number)
{
	switch(number)
 8000fa4:	2809      	cmp	r0, #9
 8000fa6:	d819      	bhi.n	8000fdc <PrintToBig+0x38>
 8000fa8:	e8df f000 	tbb	[pc, r0]
 8000fac:	0a080518 	.word	0x0a080518
 8000fb0:	12100e0c 	.word	0x12100e0c
 8000fb4:	1614      	.short	0x1614
	{
	case 0:
		PrintBig(num0);
		break;
	case 1:
		PrintBig(num1);
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <PrintToBig+0x3c>)
		break;
	case 9:
		PrintBig(num9);
		break;
	default:
		PrintBig(num0);
 8000fb8:	f7ff bfd8 	b.w	8000f6c <PrintBig>
		PrintBig(num2);
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <PrintToBig+0x40>)
 8000fbe:	e7fb      	b.n	8000fb8 <PrintToBig+0x14>
		PrintBig(num3);
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <PrintToBig+0x44>)
 8000fc2:	e7f9      	b.n	8000fb8 <PrintToBig+0x14>
		PrintBig(num4);
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <PrintToBig+0x48>)
 8000fc6:	e7f7      	b.n	8000fb8 <PrintToBig+0x14>
		PrintBig(num5);
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <PrintToBig+0x4c>)
 8000fca:	e7f5      	b.n	8000fb8 <PrintToBig+0x14>
		PrintBig(num6);
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <PrintToBig+0x50>)
 8000fce:	e7f3      	b.n	8000fb8 <PrintToBig+0x14>
		PrintBig(num7);
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <PrintToBig+0x54>)
 8000fd2:	e7f1      	b.n	8000fb8 <PrintToBig+0x14>
		PrintBig(num8);
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <PrintToBig+0x58>)
 8000fd6:	e7ef      	b.n	8000fb8 <PrintToBig+0x14>
		PrintBig(num9);
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <PrintToBig+0x5c>)
 8000fda:	e7ed      	b.n	8000fb8 <PrintToBig+0x14>
		PrintBig(num0);
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <PrintToBig+0x60>)
 8000fde:	e7eb      	b.n	8000fb8 <PrintToBig+0x14>
 8000fe0:	2000002a 	.word	0x2000002a
 8000fe4:	20000054 	.word	0x20000054
 8000fe8:	2000007e 	.word	0x2000007e
 8000fec:	200000a8 	.word	0x200000a8
 8000ff0:	200000d2 	.word	0x200000d2
 8000ff4:	200000fc 	.word	0x200000fc
 8000ff8:	20000126 	.word	0x20000126
 8000ffc:	20000150 	.word	0x20000150
 8001000:	2000017a 	.word	0x2000017a
 8001004:	20000000 	.word	0x20000000

08001008 <PrintRHTmprBig>:
		break;
	}
}

void PrintRHTmprBig(uint16_t rh_or_tmpr)
{
 8001008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t tens, units, tenth, temp;

	if( rh_or_tmpr==tmpr )
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <PrintRHTmprBig+0x68>)
{
 800100e:	4607      	mov	r7, r0
	if( rh_or_tmpr==tmpr )
 8001010:	881c      	ldrh	r4, [r3, #0]
		temp = 0;
	else
		temp = 3;

	tenth = rh_or_tmpr%10;
	rh_or_tmpr /= 10;
 8001012:	260a      	movs	r6, #10
		temp = 3;
 8001014:	4284      	cmp	r4, r0
 8001016:	bf14      	ite	ne
 8001018:	2403      	movne	r4, #3
 800101a:	2400      	moveq	r4, #0
	units = rh_or_tmpr%10;
	tens = rh_or_tmpr/10;
 800101c:	2064      	movs	r0, #100	; 0x64
 800101e:	fbb7 f0f0 	udiv	r0, r7, r0




		x_adr = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8001074 <PrintRHTmprBig+0x6c>
		y_adr = temp;
 8001028:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001078 <PrintRHTmprBig+0x70>
		PrintToBig(tens);
 800102c:	b2c0      	uxtb	r0, r0
		x_adr = 1;
 800102e:	f889 3000 	strb.w	r3, [r9]
		y_adr = temp;
 8001032:	f888 4000 	strb.w	r4, [r8]
		PrintToBig(tens);
 8001036:	f7ff ffb5 	bl	8000fa4 <PrintToBig>
	rh_or_tmpr /= 10;
 800103a:	fbb7 f5f6 	udiv	r5, r7, r6
		x_adr = 16;
 800103e:	2310      	movs	r3, #16
 8001040:	f889 3000 	strb.w	r3, [r9]
	units = rh_or_tmpr%10;
 8001044:	b2ab      	uxth	r3, r5
 8001046:	fbb3 f0f6 	udiv	r0, r3, r6
 800104a:	fb06 3010 	mls	r0, r6, r0, r3
		y_adr = temp;
		PrintToBig(units);
 800104e:	b2c0      	uxtb	r0, r0
		y_adr = temp;
 8001050:	f888 4000 	strb.w	r4, [r8]
		PrintToBig(units);
 8001054:	f7ff ffa6 	bl	8000fa4 <PrintToBig>
		x_adr = 35;
 8001058:	2323      	movs	r3, #35	; 0x23
	tenth = rh_or_tmpr%10;
 800105a:	fb06 7015 	mls	r0, r6, r5, r7
		x_adr = 35;
 800105e:	f889 3000 	strb.w	r3, [r9]
		y_adr = temp;
 8001062:	f888 4000 	strb.w	r4, [r8]
		PrintToBig(tenth);
 8001066:	b2c0      	uxtb	r0, r0

}
 8001068:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		PrintToBig(tenth);
 800106c:	f7ff bf9a 	b.w	8000fa4 <PrintToBig>
 8001070:	200001d2 	.word	0x200001d2
 8001074:	200001d0 	.word	0x200001d0
 8001078:	200001d1 	.word	0x200001d1

0800107c <main>:
{
 800107c:	b500      	push	{lr}
 800107e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001080:	f7ff f878 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 8001084:	f7ff fda2 	bl	8000bcc <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b43      	ldr	r3, [pc, #268]	; (8001198 <main+0x11c>)
  HAL_GPIO_WritePin(GPIOA, GND_Pin|LED_Pin|CLK_Pin|DIN_Pin 
 800108a:	21fb      	movs	r1, #251	; 0xfb
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GND_Pin|LED_Pin|CLK_Pin|DIN_Pin 
 800108e:	4843      	ldr	r0, [pc, #268]	; (800119c <main+0x120>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	f042 0204 	orr.w	r2, r2, #4
 8001094:	619a      	str	r2, [r3, #24]
 8001096:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GND_Pin|LED_Pin|CLK_Pin|DIN_Pin 
 8001098:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GND_Pin|LED_Pin|CLK_Pin|DIN_Pin 
 80010a2:	f7ff f9eb 	bl	800047c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VCC_GPIO_Port, VCC_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2104      	movs	r1, #4
 80010aa:	483c      	ldr	r0, [pc, #240]	; (800119c <main+0x120>)
 80010ac:	f7ff f9e6 	bl	800047c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GND_Pin|LED_Pin|VCC_Pin|CLK_Pin 
 80010b0:	23ff      	movs	r3, #255	; 0xff
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GND_Pin|LED_Pin|VCC_Pin|CLK_Pin 
 80010b4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	a904      	add	r1, sp, #16
 80010ba:	4838      	ldr	r0, [pc, #224]	; (800119c <main+0x120>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f7ff f8f5 	bl	80002b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDA1_Pin|SDA2_Pin;
 80010c6:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	4834      	ldr	r0, [pc, #208]	; (800119c <main+0x120>)
 80010cc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SDA1_Pin|SDA2_Pin;
 80010ce:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d2:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f7ff f8ec 	bl	80002b0 <HAL_GPIO_Init>
  htim2.Instance = TIM2;
 80010d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010dc:	4c30      	ldr	r4, [pc, #192]	; (80011a0 <main+0x124>)
  htim2.Init.Prescaler = 1;
 80010de:	e884 0048 	stmia.w	r4, {r3, r6}
  htim2.Init.Period = 65535;
 80010e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e6:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 65535;
 80010ea:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f0:	f7ff fd30 	bl	8000b54 <HAL_TIM_Base_Init>
 80010f4:	b100      	cbz	r0, 80010f8 <main+0x7c>
 80010f6:	e7fe      	b.n	80010f6 <main+0x7a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fc:	a904      	add	r1, sp, #16
 80010fe:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001102:	f7ff fc35 	bl	8000970 <HAL_TIM_ConfigClockSource>
 8001106:	b100      	cbz	r0, 800110a <main+0x8e>
 8001108:	e7fe      	b.n	8001108 <main+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110e:	a902      	add	r1, sp, #8
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff fd39 	bl	8000b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	b100      	cbz	r0, 800111a <main+0x9e>
 8001118:	e7fe      	b.n	8001118 <main+0x9c>
  LCD_Init();
 800111a:	f7ff fdde 	bl	8000cda <LCD_Init>
  LCD_RAM_Clr();
 800111e:	f7ff fe0b 	bl	8000d38 <LCD_RAM_Clr>
  PrintFrame();
 8001122:	f7ff fe29 	bl	8000d78 <PrintFrame>
  HAL_Delay(1000);	/*DHT2_ NEEDS 2S DELAY FOR INITIALIZATION*/
 8001126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112a:	f7ff f843 	bl	80001b4 <HAL_Delay>
		rh = dataDHT[0]*256 + dataDHT[1];
 800112e:	4d1d      	ldr	r5, [pc, #116]	; (80011a4 <main+0x128>)
 8001130:	4c1d      	ldr	r4, [pc, #116]	; (80011a8 <main+0x12c>)
		tmpr = dataDHT[2]*256 + dataDHT[3];
 8001132:	4e1e      	ldr	r6, [pc, #120]	; (80011ac <main+0x130>)
		ReadDHT(SDA1_Pin);				//reading DHT21
 8001134:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001138:	f7ff fedc 	bl	8000ef4 <ReadDHT>
		rh = dataDHT[0]*256 + dataDHT[1];
 800113c:	7822      	ldrb	r2, [r4, #0]
 800113e:	7863      	ldrb	r3, [r4, #1]
		tmpr = dataDHT[2]*256 + dataDHT[3];
 8001140:	78e0      	ldrb	r0, [r4, #3]
		rh = dataDHT[0]*256 + dataDHT[1];
 8001142:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001146:	802b      	strh	r3, [r5, #0]
		tmpr = dataDHT[2]*256 + dataDHT[3];
 8001148:	78a3      	ldrb	r3, [r4, #2]
 800114a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800114e:	b280      	uxth	r0, r0
 8001150:	8030      	strh	r0, [r6, #0]
		PrintRHTmprBig(tmpr);
 8001152:	f7ff ff59 	bl	8001008 <PrintRHTmprBig>
		PrintRHTmprBig(rh);
 8001156:	8828      	ldrh	r0, [r5, #0]
 8001158:	f7ff ff56 	bl	8001008 <PrintRHTmprBig>
		HAL_Delay(3000);
 800115c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001160:	f7ff f828 	bl	80001b4 <HAL_Delay>
		ReadDHT(SDA2_Pin);				//reading DHT22
 8001164:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001168:	f7ff fec4 	bl	8000ef4 <ReadDHT>
		rh = dataDHT[0]*256 + dataDHT[1];
 800116c:	7822      	ldrb	r2, [r4, #0]
 800116e:	7863      	ldrb	r3, [r4, #1]
		tmpr = dataDHT[2]*256 + dataDHT[3];
 8001170:	78e0      	ldrb	r0, [r4, #3]
		rh = dataDHT[0]*256 + dataDHT[1];
 8001172:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001176:	802b      	strh	r3, [r5, #0]
		tmpr = dataDHT[2]*256 + dataDHT[3];
 8001178:	78a3      	ldrb	r3, [r4, #2]
 800117a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800117e:	b280      	uxth	r0, r0
 8001180:	8030      	strh	r0, [r6, #0]
		PrintRHTmprBig(tmpr);
 8001182:	f7ff ff41 	bl	8001008 <PrintRHTmprBig>
		PrintRHTmprBig(rh);
 8001186:	8828      	ldrh	r0, [r5, #0]
 8001188:	f7ff ff3e 	bl	8001008 <PrintRHTmprBig>
		HAL_Delay(3000);
 800118c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001190:	f7ff f810 	bl	80001b4 <HAL_Delay>
 8001194:	e7ce      	b.n	8001134 <main+0xb8>
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800
 80011a0:	200001d4 	.word	0x200001d4
 80011a4:	200001ce 	.word	0x200001ce
 80011a8:	200001c8 	.word	0x200001c8
 80011ac:	200001d2 	.word	0x200001d2

080011b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <HAL_MspInit+0x88>)
{
 80011b2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	619a      	str	r2, [r3, #24]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	f7ff f804 	bl	80001d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f06f 000b 	mvn.w	r0, #11
 80011d2:	4611      	mov	r1, r2
 80011d4:	f7ff f810 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	f06f 000a 	mvn.w	r0, #10
 80011de:	4611      	mov	r1, r2
 80011e0:	f7ff f80a 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f06f 0009 	mvn.w	r0, #9
 80011ea:	4611      	mov	r1, r2
 80011ec:	f7ff f804 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f06f 0004 	mvn.w	r0, #4
 80011f6:	4611      	mov	r1, r2
 80011f8:	f7fe fffe 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f06f 0003 	mvn.w	r0, #3
 8001202:	4611      	mov	r1, r2
 8001204:	f7fe fff8 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	f06f 0001 	mvn.w	r0, #1
 800120e:	4611      	mov	r1, r2
 8001210:	f7fe fff2 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	f04f 30ff 	mov.w	r0, #4294967295
 800121a:	4611      	mov	r1, r2
 800121c:	f7fe ffec 	bl	80001f8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x8c>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001230:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	b003      	add	sp, #12
 8001234:	f85d fb04 	ldr.w	pc, [sp], #4
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000

08001240 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001240:	6803      	ldr	r3, [r0, #0]
{
 8001242:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8001244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001248:	d10a      	bne.n	8001260 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800124e:	69da      	ldr	r2, [r3, #28]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	61da      	str	r2, [r3, #28]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001260:	b002      	add	sp, #8
 8001262:	4770      	bx	lr

08001264 <NMI_Handler>:
 8001264:	4770      	bx	lr

08001266 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler>

08001268 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler>

0800126a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800126a:	e7fe      	b.n	800126a <BusFault_Handler>

0800126c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler>

0800126e <SVC_Handler>:
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001274:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f7fe ff8f 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800127e:	f7ff b812 	b.w	80002a6 <HAL_SYSTICK_IRQHandler>
	...

08001284 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <SystemInit+0x40>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f042 0201 	orr.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <SystemInit+0x44>)
 8001292:	400a      	ands	r2, r1
 8001294:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800129c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012a0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012a8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80012b0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <SystemInit+0x48>)
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	f8ff0000 	.word	0xf8ff0000
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012d2:	e003      	b.n	80012dc <LoopCopyDataInit>

080012d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012da:	3104      	adds	r1, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012e4:	d3f6      	bcc.n	80012d4 <CopyDataInit>
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012e8:	e002      	b.n	80012f0 <LoopFillZerobss>

080012ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012ec:	f842 3b04 	str.w	r3, [r2], #4

080012f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012f4:	d3f9      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f6:	f7ff ffc5 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f000 f80f 	bl	800131c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fe:	f7ff febd 	bl	800107c <main>
  bx lr
 8001302:	4770      	bx	lr
  ldr r3, =_sidata
 8001304:	080013a4 	.word	0x080013a4
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800130c:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 8001310:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8001314:	20000214 	.word	0x20000214

08001318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC1_2_IRQHandler>
	...

0800131c <__libc_init_array>:
 800131c:	b570      	push	{r4, r5, r6, lr}
 800131e:	2500      	movs	r5, #0
 8001320:	4e0c      	ldr	r6, [pc, #48]	; (8001354 <__libc_init_array+0x38>)
 8001322:	4c0d      	ldr	r4, [pc, #52]	; (8001358 <__libc_init_array+0x3c>)
 8001324:	1ba4      	subs	r4, r4, r6
 8001326:	10a4      	asrs	r4, r4, #2
 8001328:	42a5      	cmp	r5, r4
 800132a:	d109      	bne.n	8001340 <__libc_init_array+0x24>
 800132c:	f000 f81a 	bl	8001364 <_init>
 8001330:	2500      	movs	r5, #0
 8001332:	4e0a      	ldr	r6, [pc, #40]	; (800135c <__libc_init_array+0x40>)
 8001334:	4c0a      	ldr	r4, [pc, #40]	; (8001360 <__libc_init_array+0x44>)
 8001336:	1ba4      	subs	r4, r4, r6
 8001338:	10a4      	asrs	r4, r4, #2
 800133a:	42a5      	cmp	r5, r4
 800133c:	d105      	bne.n	800134a <__libc_init_array+0x2e>
 800133e:	bd70      	pop	{r4, r5, r6, pc}
 8001340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001344:	4798      	blx	r3
 8001346:	3501      	adds	r5, #1
 8001348:	e7ee      	b.n	8001328 <__libc_init_array+0xc>
 800134a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800134e:	4798      	blx	r3
 8001350:	3501      	adds	r5, #1
 8001352:	e7f2      	b.n	800133a <__libc_init_array+0x1e>
 8001354:	0800139c 	.word	0x0800139c
 8001358:	0800139c 	.word	0x0800139c
 800135c:	0800139c 	.word	0x0800139c
 8001360:	080013a0 	.word	0x080013a0

08001364 <_init>:
 8001364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001366:	bf00      	nop
 8001368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136a:	bc08      	pop	{r3}
 800136c:	469e      	mov	lr, r3
 800136e:	4770      	bx	lr

08001370 <_fini>:
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	bf00      	nop
 8001374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001376:	bc08      	pop	{r3}
 8001378:	469e      	mov	lr, r3
 800137a:	4770      	bx	lr
